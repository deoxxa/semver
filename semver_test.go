package semver

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestVersionParser(t *testing.T) {
	a := assert.New(t)

	v, err := ParseVersion("1.2.3-a.b+x.y.z")
	a.NoError(err)

	a.Equal(1, v.Major)
	a.Equal(2, v.Minor)
	a.Equal(3, v.Patch)

	a.Len(v.Prerelease, 2)
	a.Equal(v.Prerelease[0], "a")
	a.Equal(v.Prerelease[1], "b")

	a.Len(v.Build, 3)
	a.Equal(v.Build[0], "x")
	a.Equal(v.Build[1], "y")
	a.Equal(v.Build[2], "z")
}

func TestRangeParser(t *testing.T) {
	a := assert.New(t)

	pairs := [][2]string{
		{"1.0.0 - 2.0.0", ">=1.0.0 <=2.0.0"},
		{"1.0.0", "1.0.0"},
		{">=*", "*"},
		{"", "*"},
		{"*", "*"},
		{"*", "*"},
		{">=1.0.0", ">=1.0.0"},
		{">1.0.0", ">1.0.0"},
		{"<=2.0.0", "<=2.0.0"},
		{"1", ">=1.0.0 <2.0.0"},
		{"<=2.0.0", "<=2.0.0"},
		{"<=2.0.0", "<=2.0.0"},
		{"<2.0.0", "<2.0.0"},
		{"<2.0.0", "<2.0.0"},
		{">= 1.0.0", ">=1.0.0"},
		{">=  1.0.0", ">=1.0.0"},
		{">=   1.0.0", ">=1.0.0"},
		{"> 1.0.0", ">1.0.0"},
		{">  1.0.0", ">1.0.0"},
		{"<=   2.0.0", "<=2.0.0"},
		{"<= 2.0.0", "<=2.0.0"},
		{"<=  2.0.0", "<=2.0.0"},
		{"<    2.0.0", "<2.0.0"},
		{"<	2.0.0", "<2.0.0"},
		{">=0.1.97", ">=0.1.97"},
		{">=0.1.97", ">=0.1.97"},
		{"0.1.20 || 1.2.4", "0.1.20 || 1.2.4"},
		{">=0.2.3 || <0.0.1", ">=0.2.3 || <0.0.1"},
		{">=0.2.3 || <0.0.1", ">=0.2.3 || <0.0.1"},
		{">=0.2.3 || <0.0.1", ">=0.2.3 || <0.0.1"},
		{"||", "||"},
		{"2.x.x", ">=2.0.0 <3.0.0"},
		{"1.2.x", ">=1.2.0 <1.3.0"},
		{"1.2.x || 2.x", ">=1.2.0 <1.3.0 || >=2.0.0 <3.0.0"},
		{"1.2.x || 2.x", ">=1.2.0 <1.3.0 || >=2.0.0 <3.0.0"},
		{"x", "*"},
		{"2.*.*", ">=2.0.0 <3.0.0"},
		{"1.2.*", ">=1.2.0 <1.3.0"},
		{"1.2.* || 2.*", ">=1.2.0 <1.3.0 || >=2.0.0 <3.0.0"},
		{"*", "*"},
		{"2", ">=2.0.0 <3.0.0"},
		{"2.3", ">=2.3.0 <2.4.0"},
		{"~2.4", ">=2.4.0 <2.5.0"},
		{"~2.4", ">=2.4.0 <2.5.0"},
		{"~>3.2.1", ">=3.2.1 <3.3.0"},
		{"~1", ">=1.0.0 <2.0.0"},
		{"~>1", ">=1.0.0 <2.0.0"},
		{"~> 1", ">=1.0.0 <2.0.0"},
		{"~1.0", ">=1.0.0 <1.1.0"},
		{"~ 1.0", ">=1.0.0 <1.1.0"},
		{"^0", ">=0.0.0 <1.0.0"},
		{"^ 1", ">=1.0.0 <2.0.0"},
		{"^0.1", ">=0.1.0 <0.2.0"},
		{"^1.0", ">=1.0.0 <2.0.0"},
		{"^1.2", ">=1.2.0 <2.0.0"},
		{"^0.0.1", ">=0.0.1 <0.0.2"},
		{"^0.0.1-beta", ">=0.0.1-beta <0.0.2"},
		{"^0.1.2", ">=0.1.2 <0.2.0"},
		{"^1.2.3", ">=1.2.3 <2.0.0"},
		{"^1.2.3-beta.4", ">=1.2.3-beta.4 <2.0.0"},
		{"<1", "<1.0.0"},
		{"< 1", "<1.0.0"},
		{">=1", ">=1.0.0"},
		{">= 1", ">=1.0.0"},
		{"<1.2", "<1.2.0"},
		{"< 1.2", "<1.2.0"},
		{"1", ">=1.0.0 <2.0.0"},
	}

	for _, p := range pairs {
		r, err := ParseRange(p[0])
		a.NoError(err)
		a.NotNil(r)

		a.Equal(p[1], r.String())
	}
}

func TestPositiveMatch(t *testing.T) {
	a := assert.New(t)

	pairs := [][2]string{
		{"1.0.0 - 2.0.0", "1.2.3"},
		{"^1.2.3+build", "1.2.3"},
		{"^1.2.3+build", "1.3.0"},
		{"1.2.3-pre+asdf - 2.4.3-pre+asdf", "1.2.3"},
		{"1.2.3-pre+asdf - 2.4.3-pre+asdf", "1.2.3-pre.2"},
		{"1.2.3-pre+asdf - 2.4.3-pre+asdf", "2.4.3-alpha"},
		{"1.2.3+asdf - 2.4.3+asdf", "1.2.3"},
		{"1.0.0", "1.0.0"},
		{">=*", "0.2.4"},
		{"", "1.0.0"},
		{"*", "1.2.3"},
		{">=1.0.0", "1.0.0"},
		{">=1.0.0", "1.0.1"},
		{">=1.0.0", "1.1.0"},
		{">1.0.0", "1.0.1"},
		{">1.0.0", "1.1.0"},
		{"<=2.0.0", "2.0.0"},
		{"<=2.0.0", "1.9999.9999"},
		{"<=2.0.0", "0.2.9"},
		{"<2.0.0", "1.9999.9999"},
		{"<2.0.0", "0.2.9"},
		{">= 1.0.0", "1.0.0"},
		{">=  1.0.0", "1.0.1"},
		{">=   1.0.0", "1.1.0"},
		{"> 1.0.0", "1.0.1"},
		{">  1.0.0", "1.1.0"},
		{"<=   2.0.0", "2.0.0"},
		{"<= 2.0.0", "1.9999.9999"},
		{"<=  2.0.0", "0.2.9"},
		{"<    2.0.0", "1.9999.9999"},
		{"<\t2.0.0", "0.2.9"},
		{">=0.1.97", "0.1.97"},
		{"0.1.20 || 1.2.4", "1.2.4"},
		{">=0.2.3 || <0.0.1", "0.0.0"},
		{">=0.2.3 || <0.0.1", "0.2.3"},
		{">=0.2.3 || <0.0.1", "0.2.4"},
		{"||", "1.3.4"},
		{"2.x.x", "2.1.3"},
		{"1.2.x", "1.2.3"},
		{"1.2.x || 2.x", "2.1.3"},
		{"1.2.x || 2.x", "1.2.3"},
		{"x", "1.2.3"},
		{"2.*.*", "2.1.3"},
		{"1.2.*", "1.2.3"},
		{"1.2.* || 2.*", "2.1.3"},
		{"1.2.* || 2.*", "1.2.3"},
		{"*", "1.2.3"},
		{"2", "2.1.2"},
		{"2.3", "2.3.1"},
		{"~2.4", "2.4.0"}, // >=2.4.0 <2.5.0
		{"~2.4", "2.4.5"},
		{"~>3.2.1", "3.2.2"}, // >=3.2.1 <3.3.0,
		{"~1", "1.2.3"},      // >=1.0.0 <2.0.0
		{"~>1", "1.2.3"},
		{"~> 1", "1.2.3"},
		{"~1.0", "1.0.2"}, // >=1.0.0 <1.1.0,
		{"~ 1.0", "1.0.2"},
		{"~ 1.0.3", "1.0.12"},
		{">=1", "1.0.0"},
		{">= 1", "1.0.0"},
		{"<1.2", "1.1.1"},
		{"< 1.2", "1.1.1"},
		{"~v0.5.4-pre", "0.5.5"},
		{"~v0.5.4-pre", "0.5.4"},
		{"=0.7.x", "0.7.2"},
		{"<=0.7.x", "0.7.2"},
		{">=0.7.x", "0.7.2"},
		{"<=0.7.x", "0.6.2"},
		{"~1.2.1 >=1.2.3", "1.2.3"},
		{"~1.2.1 =1.2.3", "1.2.3"},
		{"~1.2.1 1.2.3", "1.2.3"},
		{"~1.2.1 >=1.2.3 1.2.3", "1.2.3"},
		{"~1.2.1 1.2.3 >=1.2.3", "1.2.3"},
		{"~1.2.1 1.2.3", "1.2.3"},
		{">=1.2.1 1.2.3", "1.2.3"},
		{"1.2.3 >=1.2.1", "1.2.3"},
		{">=1.2.3 >=1.2.1", "1.2.3"},
		{">=1.2.1 >=1.2.3", "1.2.3"},
		{">=1.2", "1.2.8"},
		{"^1.2.3", "1.8.1"},
		{"^0.1.2", "0.1.2"},
		{"^0.1", "0.1.2"},
		{"^1.2", "1.4.2"},
		{"^1.2 ^1", "1.4.2"},
		{"^1.2.3-alpha", "1.2.3-pre"},
		{"^1.2.0-alpha", "1.2.0-pre"},
		{"^0.0.1-alpha", "0.0.1-beta"},
	}

	for _, p := range pairs {
		v, err := ParseVersion(p[1])
		a.NoError(err, p[1])
		a.NotNil(v, p[1])

		r, err := ParseRange(p[0])
		a.NoError(err, p[0])
		a.NotNil(r, p[0])
		a.True(r.SatisfiedBy(v), p[0]+" : "+p[1])
	}
}

func TestNegativeMatch(t *testing.T) {
	a := assert.New(t)

	pairs := [][2]string{
		{"1.0.0 - 2.0.0", "2.2.3"},
		{"1.2.3+asdf - 2.4.3+asdf", "1.2.3-pre.2"},
		{"1.2.3+asdf - 2.4.3+asdf", "2.4.3-alpha"},
		{"^1.2.3+build", "2.0.0"},
		{"^1.2.3+build", "1.2.0"},
		{"^1.2.3", "1.2.3-pre"},
		{"^1.2", "1.2.0-pre"},
		{">1.2", "1.3.0-beta"},
		{"<=1.2.3", "1.2.3-beta"},
		{"^1.2.3", "1.2.3-beta"},
		{"=0.7.x", "0.7.0-asdf"},
		{">=0.7.x", "0.7.0-asdf"},
		{"1.0.0", "1.0.1"},
		{">=1.0.0", "0.0.0"},
		{">=1.0.0", "0.0.1"},
		{">=1.0.0", "0.1.0"},
		{">1.0.0", "0.0.1"},
		{">1.0.0", "0.1.0"},
		{"<=2.0.0", "3.0.0"},
		{"<=2.0.0", "2.9999.9999"},
		{"<=2.0.0", "2.2.9"},
		{"<2.0.0", "2.9999.9999"},
		{"<2.0.0", "2.2.9"},
		{">=0.1.97", "0.1.93"},
		{"0.1.20 || 1.2.4", "1.2.3"},
		{">=0.2.3 || <0.0.1", "0.0.3"},
		{">=0.2.3 || <0.0.1", "0.2.2"},
		{"2.x.x", "1.1.3"},
		{"2.x.x", "3.1.3"},
		{"1.2.x", "1.3.3"},
		{"1.2.x || 2.x", "3.1.3"},
		{"1.2.x || 2.x", "1.1.3"},
		{"2.*.*", "1.1.3"},
		{"2.*.*", "3.1.3"},
		{"1.2.*", "1.3.3"},
		{"1.2.* || 2.*", "3.1.3"},
		{"1.2.* || 2.*", "1.1.3"},
		{"2", "1.1.2"},
		{"2.3", "2.4.1"},
		{"~2.4", "2.5.0"}, // >=2.4.0 <2.5.0
		{"~2.4", "2.3.9"},
		{"~>3.2.1", "3.3.2"}, // >=3.2.1 <3.3.0
		{"~>3.2.1", "3.2.0"}, // >=3.2.1 <3.3.0
		{"~1", "0.2.3"},      // >=1.0.0 <2.0.0
		{"~>1", "2.2.3"},
		{"~1.0", "1.1.0"}, // >=1.0.0 <1.1.0
		{"<1", "1.0.0"},
		{">=1.2", "1.1.1"},
		{"~v0.5.4-beta", "0.5.4-alpha"},
		{"=0.7.x", "0.8.2"},
		{">=0.7.x", "0.6.2"},
		{"<0.7.x", "0.7.2"},
		{"<1.2.3", "1.2.3-beta"},
		{"=1.2.3", "1.2.3-beta"},
		{">1.2", "1.2.8"},
		{"^1.2.3", "2.0.0-alpha"},
		{"^1.2.3", "1.2.2"},
		{"^1.2", "1.1.9"},
		// invalid ranges never satisfied!
		{"blerg", "1.2.3"},
	}

	for _, p := range pairs {
		v, err := ParseVersion(p[1])
		a.NoError(err, p[1])
		a.NotNil(v, p[1])

		r, err := ParseRange(p[0])
		a.NoError(err, p[0])
		a.NotNil(r, p[0])
		a.False(r.SatisfiedBy(v), p[0]+" : "+p[1])
	}
}
